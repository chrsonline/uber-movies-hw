{"version":3,"sources":["Application.js"],"names":[],"mappingsfile":"all.js","sourcesContent":["'use strict';\n\njQuery(document).ready(function () {\n    var map;\n\n    var options = {\n        zoom: 11,\n        center:  new google.maps.LatLng(37.793, -122.394),\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        // disable default UI\n    };\n\n    map = new google.maps.Map($('#map')[0], options);\n\n    var app = {};\n\n    app.Suggestion = Backbone.Model.extend({\n      defaults: {\n        term: 'aa',\n        type: 'ss',\n        selected: false\n      }\n    });\n\n    app.SuggestionView = Backbone.View.extend({\n      tagName: 'li',\n      className: 'suggestionBox',\n      template: _.template('<%- term %>'),\n      initialize: function() {\n        this.model.on('change', this.render, this);\n        this.model.on('destroy', this.remove, this);\n        this.model.on('change:selected', this.setSelected, this);\n      },\n      setSelected: function() {\n        console.log(\"set selected was called\");\n        console.log(this.$el);\n        this.$el.toggleClass('suggestionBoxSelected', this.model.get('selected'));\n      },\n      render: function() {\n        this.$el.html(this.template(this.model.toJSON()));\n        return this;\n      }\n    });\n\n    app.Suggestions = Backbone.Collection.extend({\n      initialize: function() {\n        this.selected = null;\n      },\n      navigateUp: function() {\n        var index = this.indexOf(this.selected);\n        if(index == 0) {\n\n        } else {\n            this.setSelected(this.at(index - 1));\n        }\n      },\n      navigateDown: function() {\n        console.log(\"Selected set to \");\n        console.log(this.selected);\n        if(this.length > 0 && this.selected == null) {\n            console.log(\"Setting selection to 0\");\n            this.setSelected(this.at(0));\n        } else {\n          console.log(\"Navigating Down\");\n          var index = this.indexOf(this.selected);\n          if(index < this.length - 1) {\n              this.setSelected(this.at(index + 1));\n          }\n        }\n      },\n      setSelected: function(suggestion) {\n        if(this.selected != null) {\n          this.selected.set({ selected: false });\n        }\n        suggestion.set({ selected: true });\n        this.selected = suggestion;\n        console.log(\"Selected set to \");\n        console.log(this.selected);\n      },\n      url: function () {\n        return '/search/autocomplete?query=' + $('#search-term').val();\n      },\n      parse: function(data) {\n        return data.suggestions;\n      },\n      model: app.Suggestion\n    });\n\n    app.AutocompleteView = Backbone.View.extend({\n      el: '#search',\n      initialize: function() {\n          this.suggestions = new app.Suggestions();\n          this.suggestions.on('reset', this.addAll, this );\n      },\n      events: {\n          \"change input\": \"updateItems\",\n          \"input #search-term\": \"updateItems\",\n          'keyup :input': 'handleKeyPress',\n          'keypress :input': 'handleKeyPress'\n      },\n      handleKeyPress: function(e) {\n        var code = (e.keyCode ? e.keyCode : e.which);\n        if (code == 40) {\n            this.suggestions.navigateDown();\n        }\n        if (code == 38) {\n            this.suggestions.navigateUp();\n        }\n        if (code == 13) {\n            this.suggestions.reset();\n\n            if(this.suggestions.selected != null) {\n              $('#search-term').val( this.suggestions.selected.get('term') );\n              console.log('Sum gay.');\n              var e = jQuery.Event(\"keydown\");\n              e.which = 13;\n              $('#search-term').trigger(e);\n            }\n        }\n      },\n      updateItems: function () {\n          this.suggestions.fetch();\n      },\n      addOne: function(suggestion) {\n        var view = new app.SuggestionView({model: suggestion});\n        this.$el.find('ul').append(view.render().el);\n      },\n      addAll: function () {\n        this.$el.find('ul').empty();\n        this.suggestions.each( $.proxy( this.addOne, this ) );\n      },\n      render: function (suggestions) {\n\n      }\n    });\n\n    app.Location = Backbone.Model.extend({\n      defaults: {\n        title: '',\n        release_year: '',\n        production_company: '',\n        distributor: '',\n        director: '',\n        writer: '',\n        facts: '',\n        location: '',\n        latitude: '',\n        longitude: '',\n        actors: []\n      }\n    });\n\n\n    app.LocationView = Backbone.View.extend({\n      tagName:  \"li\",\n      initialize: function(options) {\n        this.map = options.map;\n\n        console.log('geo info');\n        console.log(this.model.get('geocode_information'));\n\n\n        console.log(this.model.get('geocode_information.longitude'));\n        console.log(this.model.get('geocode_information').longitude);\n        console.log(this.model.get('geocode_information').latitude);\n\n        console.log('the whole model');\n        console.log(this.model);\n\n        console.log(\"omg wtf\");\n        console.log(this.map);\n\n        this.marker = new google.maps.Marker({\n            map: this.map,\n            position: new google.maps.LatLng(this.model.get('geocode_information').latitude, this.model.get('geocode_information').longitude),\n            animation: google.maps.Animation.DROP,\n            title: this.model.get('location'),\n            facts: this.model.get('facts'),\n            actors: this.model.get('actors'),\n            id : this.model.get('id')\n        });\n\n        this.marker.infowindow = new google.maps.InfoWindow({\n          content: this.marker.title\n        });\n\n        google.maps.event.addListener(this.marker, 'mouseover', this.showPopover);\n        google.maps.event.addListener(this.marker, 'mouseout', this.hidePopover);\n      },\n      hidePopover : function() {\n        this.infowindow.close();\n      },\n      showPopover : function() {\n        this.infowindow.open(this.map, this);\n      },\n      render: function() { },\n      remove : function() {\n        this.marker.setMap(null);\n        this.marker = null;\n      }\n    });\n\n    app.SearchResults = Backbone.Collection.extend({\n      url: function () {\n        return '/search/movies?query=' + $('#search-term').val();\n      },\n      parse: function(data) {\n        return data;\n      },\n      model: app.Location\n    });\n\n    app.ResultsView = Backbone.View.extend({\n      initialize: function (options) {\n        this.map = options.map;\n        this.results = new app.SearchResults();\n        this.results.on('reset', this.addAll, this );\n      },\n      updateItems: function() {\n        this.results.fetch();\n      },\n      addOne: function(searchResult) {\n        var view = new app.LocationView({model: searchResult, map: this.map});\n\n        view.render();\n      },\n      addAll: function () {\n        this.results.each( $.proxy( this.addOne, this ) );\n      },\n    });\n\n    app.autocompleteView = new app.AutocompleteView();\n    app.resultsView = new app.ResultsView({ map: map });\n\n    $('#search-term').keydown(function(e) {\n      var code = (e.keyCode ? e.keyCode : e.which);\n      if (code == 13) {\n            app.resultsView.updateItems();\n            // also have a little search button to be pressed\n            // Display the current search term - no results if nothing\n            // Display aggregate information in panel overlayed on the left side\n            // Clear current search results if necessary\n            // Kick off searchresults collection with call of type/term\n      }\n\n    });\n});\n"],"sourceRoot":"/source/"}